

sudo apt-get install libmariadbclient-dev
sudo apt-get install python-mariadb
sudo apt-get install python-mysqldb


sudo pip3 install SQLAlchemy
#sudo pip3 install MySql-Python #doesn't support python3
pip install mysqlclient #instead of MySql-Python

==============sqlalchemy
TODO: read "Using Textual SQL" starting on "Bind paramters" sentence

links:
   SQL Expression Language
   http://docs.sqlalchemy.org/en/rel_1_1/core/tutorial.html
   ORM (Object Relations Mapping)
      http://docs.sqlalchemy.org/en/rel_1_1/orm/tutorial.html

filter/query/limit
   Query returns named tuples (KeyedTuple)
   Query supports ORM-instrumented descriptors
   common filters
      EQUALS      = query.filter(User.name == 'ed')
      NOT EQUALS  = query.filter(User.name != 'ed')
      LIKE        = query.filter(User.name.like('%ed%'))
      IN          = query.filter(User.name.in_(['ed', 'wendy']))
      IN #2       = query.filter(User.name.in_(
                      session.query(User.name).filter(User.name.like('%ed%'))
                    ))
      NOT IN      = query.filter(~User.name.in_(['ed', 'wanda']))
      IS NULL     = query.filter(User.name == None) or query.filter
                    query.filter(User.name.is_(None))
      IS NOT NULL = query.filter(User.name != None)
                    query.filter(User.name.isnot(None))
      AND         = from sqlalchemy import and_
                    query.filter(and_(User.name == 'ed', User.fullname == 'Ed Jones'))
                    query.filter(User.name == 'ed', User.fullname == 'Ed Jones')
                    query.filter(User.name == 'ed').filter(User.fullname == 'Ed Jones')
      OR          = from sqlalchemy import or_
                    query.filter(or_(User.name == 'ed', User.name == 'wendy'))
      MATCH/CONTAINS
                  = query.filter(User.name.match('wendy'))

   ex 1 filter_by (used with keyboards):
      our_user = session.query(User).filter_by(name='ed').first()
   ex 2 filter (magic operator without lambda):
      our_user = session.query(User).filter(User.name == 'Ed')
      our_user = session.query(User).filter(User.name.in_(['Ho', 'Bah'])).all()`
   ex 3 (LIMIT/OFFSET/ORDER BY):
      for u in session.query(User).order_by(User.id)[1:3]:
         print(u)
   ex 4:
      for instance in session.query(User).order_by(User.id):
         print(instance.name, instance.fullname)`
   ex 5:
      for row in session.query(User, User.fullname, User.name).all():
         print(row.User, row.name, row.fullname)
   ex 6 (with labels):
      for row in session.query(User.name.label('name_label')).all():
         print(row.name_label)
   ex 7 aliases:
      from sqlalchemy.orm import aliased
      user_alias = aliased(User, name='user_alias')
      for row in session.query(user_aliases, user_aliases.name).all():
         print(row.user_alias)
   ex 8 generative (uses AND):
      for user in session.query(User).\
            filter(User.name=='ed').\
            filter(User.fullname=='Ed blah'):
         print(user)

returning lists and scalars
   ex:
      query = session.query(User).filter(User.name.like('%ed')).order_by(User.id)
      query.all() #gets all
      query.first() #applies limit of 1
      query.one() #fully fetches all rows, and if not exactly 1 object found, raises an error
      query.one_or_none() #if more than one, still raises
      query.scalar() #invokes one(), and upon success returns the first column of row
         session.query(User.id).filter(User.name == 'ed').order_by(User.id).scalar() #returns id

textual queries:
   ex1:
      from sqlalchemy import text
      for user in session.query(user).filter(text("id<224")).order_by(text("id")).all():
         print(user.name)
   bind paramaters:
      session.query(User).filter(text("id<:value and name=:name")).\
         params(value=224, name='fred').order_by(User.id).one()
   entire text query:
      session.query(User).from_statement(
         text("SELECT * FROM users where name=:name")).\
         params(name='ed').all()
      #returns list of User objects
   TextClause (if doesn't map very well idk what exactly for):
      stmt = text("SELECT name, id, fullname, password "
                  "FROM users where name=:name")
      stmt = stmt.columns(User.name, User.id, User.fullname, User.password)
      session.query(User).from_statement(stmt).parmas(name='ed').all()
      #returns User object???
   text specify which to return
      stmt = text("SELECT name, id FROM users where name=:name")
      stmt = stmt.columns(User.name, User.id)
      session.query(User.id, User.name)
      #returns [(1, u'ed')]

`counting:
   creates sub-query and then does "SELECT count(*) FROM table"
      session.query(User).filter(User.name.like('%ed')).count()
   when "thing to be counted" needs to be explicit
      from sqlalchemy import func
      session.query(func.count(User.name), User.name).group_by(User.name).all()
         => [(1, u'ed'), (1, u'fred')]
   first method using second method (to achieve SELECT count(*) FROM table)
      session.query(func.count('*')).select_from(User).scalar() #returns integer
   same thing without select_from()
      session.query(func.count(User.id)).scalar()`

`relationships:
ex1:

`


